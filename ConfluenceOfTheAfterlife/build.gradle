plugins {
    id 'net.neoforged.moddev'
}
var projectName = ["TerraEntity","MineTeam","EquipmentBenediction",
                   "TerraCurio","ParticleStorm","HeavenDestinyMoment","PhaseJourney"
]



neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()
        }
        server {
            server()
            //programArgument '--nogui'
        }
        data {
            data()
            gameDirectory = project.file('run-data')
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
        projectName.forEach {name -> {
            create(name) {
                sourceSet(project(":" + name).sourceSets["main"])
            }
        }}
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    maven { // Registrate
        url "https://maven.ithundxr.dev/snapshots"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

dependencies {
    projectName.forEach {name -> implementation jarJar(project(":" + name))}


    implementation jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[${registrate_version},)")
    implementation jarJar(group: 'software.bernie.geckolib', name: "geckolib-neoforge-${minecraft_version}", version: "[${geckolib_version},)")

    implementation "curse.maven:adorned-1036809:5740650"

    compileOnly "curse.maven:jade-324717:5639932"
    runtimeOnly "curse.maven:jade-324717:5639932"

    compileOnly("mezz.jei:jei-1.21-common-api:${jei_version}")
    compileOnly "mezz.jei:jei-1.21-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-1.21-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }


}


tasks.withType(Copy).all{ duplicatesStrategy = DuplicatesStrategy.EXCLUDE }

tasks.withType(JavaCompile).configureEach {options.encoding = 'UTF-8'}

tasks.register("genVoilaRun") {
    def runtimeClasspath = files({
        sourceSets.main.output + configurations.runtimeClasspath
    })
    def projectDir = project.projectDir
    def runConfigDir = new File(project.rootDir, ".idea/runConfigurations")
    def programParam = new File(projectDir, "build/moddev/clientRunProgramArgs.txt").toString().replace("\\", "\\\\")
    def workingDir = new File(projectDir, "run")
    def vmArgs = new File(projectDir, "build/moddev/clientRunVmArgs.txt").toString().replace("\\", "\\\\")
    def moduleName = "${project.rootProject.name}.${project.name}.${sourceSets.main.name}" // 写死了自身必定在第二层
    def classesDir = new File(projectDir, "build/classes/java/main").toString().replace("\\", "\\\\")
    def resDir = new File(projectDir, "build/resources/main").toString().replace("\\", "\\\\")
    def modId = mod_id
    def ideaRt = "D:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.2.3\\lib\\idea_rt.jar"
//    return;

    def runConfig =
            """
<component name="ProjectRunConfigurationManager">
    <configuration default="false" name="Confluence" type="Application" factoryName="Application" nameIsGenerated="false">
        <option name="MAIN_CLASS_NAME" value="net.neoforged.devlaunch.Main" />
        <module name="${moduleName}" />
        <option name="VM_PARAMETERS" value="@${vmArgs} -Dfml.modFolders=${modId}%%${classesDir};${modId}%%${resDir} -cp &quot;${runtimeClasspath.asPath};${ideaRt}&quot;" />
        <option name="PROGRAM_PARAMETERS" value="@${programParam}" />
        <option name="WORKING_DIRECTORY" value="${workingDir}" />
        <method v="2">
            <option name="Gradle.BeforeRunTask" enabled="true" tasks="jar" externalProjectPath="\$PROJECT_DIR\$" vmOptions="" scriptParameters="" />
        </method>
    </configuration>
</component>
"""
    if (!runConfigDir.exists()) {
        runConfigDir.mkdirs()
    }
    new File(runConfigDir, "GeneratedRunConfig.xml").text = runConfig
}
